Regular Expressions in Python
    - import re => "re" module for dealing with regular expressions in Python

    - match => looks for pattern only at beginning of the string

    - fullmatch => looks for pattern in the whole string
    -   >>> import re
        >>> m = re.match("T", "Tiger")
        >>> m
        <_sre.SRE_Match object; span=(0, 1), match='T'>
        >>> m.start()
        0
        >>> m.end()
        1
        >>> m.group(0)
        'T'
        >>> m = re.fullmatch("Tiger", "Tiger")
        >>> m
        <_sre.SRE_Match object; span=(0, 5), match='Tiger'>
        >>> m = re.fullmatch("ig", "Tiger")
        >>> m
        >>> print(m)
        None
        >>> m = re.fullmatch("\w+", "Tiger")
        >>> m
        <_sre.SRE_Match object; span=(0, 5), match='Tiger'>
        >>> m = re.fullmatch("\w+", "Ti.ger")
        >>> m
        >>> print(m)
        None
        >>> match = re.match("(\w+)\.(\w+)", "Ti.ger")
        >>> match
        <_sre.SRE_Match object; span=(0, 6), match='Ti.ger'>
        >>> match.start(), match.end(), match.group(0), match.group(1), match.group(2)
        (0, 6, 'Ti.ger', 'Ti', 'ger')

    - search => look for pattern in the whole string and match wherever found
        >>> match = re.search("(\w+)\.(\w+)", "Ti$abc.ger")
        >>> match.start(), match.end(), match.group(0), match.group(1), match.group(2)
        (3, 10, 'abc.ger', 'abc', 'ger')

    - finditer => find all occurrances of matched pattern in the whole string, returns an iterator
        >>> match = re.finditer("(\w+)\.(\w+)", "abc$tig.er$li.on")
        >>> for m in match:
        ...     m.start(), m.end(), m.group(0), m.group(1), m.group(2)
        ... 
        (4, 10, 'tig.er', 'tig', 'er')
        (11, 16, 'li.on', 'li', 'on')

    - compile => creates a RegEx object of passed pattern. (Internally crates a state machine ready to be used, instead of every time creating it newly, making it faster as compared with other RE methods)
        - All the methods that can be called on RE can be called on compiled object.
        >>> RegExObj = re.compile("(\w+\.\w+)@(\w+)\.(\w+)")
        >>> RegExObj.match("tiger")
        >>> RegExObj.match("atharva.joshi@infosys.com")
        <_sre.SRE_Match object; span=(0, 25), match='atharva.joshi@infosys.com'>
        >>> RegExObj.match("joshi.atharva1992@gmail.com")
        <_sre.SRE_Match object; span=(0, 27), match='joshi.atharva1992@gmail.com'>

    - sub => substitute input string with given token wherever matching with pattern, throughout the string
        >>> RegExObj = re.compile("\w+\.\w+")
        >>> re.sub(RegExObj, "hello", "tiger li.on atharva@joshi atharva.joshi")
        'tiger hello atharva@joshi hello'

    - subn => substitute input string with given token wherever matching with pattern, at replace numbers
        >>> RegExObj = re.compile("\w+\.\w+")
        >>> re.subn(RegExObj, "hello", "tiger li.on atharva@joshi atharva.joshi", 1)
        ('tiger hello atharva@joshi atharva.joshi', 1)

    - flags in re [example]
        >>> text = "This is some text -- with punctuation"
        >>> pattern = "T\w+"
        >>> with_case = re.compile(pattern)
        >>> without_case = re.compile(pattern, re.IGNORECASE)
        >>> print('Text               :', text)
        Text               : This is some text -- with punctuation
        >>> print('Pattern            :', pattern)
        Pattern            : T\w+
        >>> print('Case-sensitive     :', with_case.findall(text))
        Case-sensitive     : ['This']
        >>> print('Case-insensitive    :', without_case.findall(text))
        Case-insensitive    : ['This', 'text', 'th', 'tuation']
    
    - split => splits the string from the first occurrances of given pattern
        >>> re.split('@', 'Tiger@gmail.com')
        ['Tiger', 'gmail.com']

    - Special Characters in RE
        - Period (.) - matches any character except newline
            >>> re.match("a.b", "axb")
            <_sre.SRE_Match object; span=(0, 3), match='axb'>
            >>> re.match("a.b", "a@b")
            <_sre.SRE_Match object; span=(0, 3), match='a@b'>
            >>> re.match("a.b", "a b")
            <_sre.SRE_Match object; span=(0, 3), match='a b'>

        - Caret (^) - matches at beginning of string
            >>> re.search("^a.b$", "axb")
            <_sre.SRE_Match object; span=(0, 3), match='axb'>
        
        - Asterix (*) - matches 0 or more of given pattern
            >>> for match in re.finditer('a*', 'bababababbaabbbaaaaab'):
            ...     print(match)
            ... 
            <_sre.SRE_Match object; span=(0, 0), match=''>
            <_sre.SRE_Match object; span=(1, 2), match='a'>
            <_sre.SRE_Match object; span=(2, 2), match=''>
            <_sre.SRE_Match object; span=(3, 4), match='a'>
            <_sre.SRE_Match object; span=(4, 4), match=''>
            <_sre.SRE_Match object; span=(5, 6), match='a'>
            <_sre.SRE_Match object; span=(6, 6), match=''>
            <_sre.SRE_Match object; span=(7, 8), match='a'>
            <_sre.SRE_Match object; span=(8, 8), match=''>
            <_sre.SRE_Match object; span=(9, 9), match=''>
            <_sre.SRE_Match object; span=(10, 12), match='aa'>
            <_sre.SRE_Match object; span=(12, 12), match=''>
            <_sre.SRE_Match object; span=(13, 13), match=''>
            <_sre.SRE_Match object; span=(14, 14), match=''>
            <_sre.SRE_Match object; span=(15, 20), match='aaaaa'>
            <_sre.SRE_Match object; span=(20, 20), match=''>
            <_sre.SRE_Match object; span=(21, 21), match=''>

        - Plus (+) => matches 1 or more of matching pattern
            >>> for match in re.finditer('a+', 'bababababbaabbbaaaaab'):
            ...     print(match)
            ... 
            <_sre.SRE_Match object; span=(1, 2), match='a'>
            <_sre.SRE_Match object; span=(3, 4), match='a'>
            <_sre.SRE_Match object; span=(5, 6), match='a'>
            <_sre.SRE_Match object; span=(7, 8), match='a'>
            <_sre.SRE_Match object; span=(10, 12), match='aa'>
            <_sre.SRE_Match object; span=(15, 20), match='aaaaa'>
        
        - Question Mark (+?, *?) - matches 0 or 1 occurrances of preceding pattern in given string [Non-Greedy]
            >>> for match in re.finditer('a+?', 'bababababbaabbbaaaaab'):
            ...     print(match)
            ... 
            <_sre.SRE_Match object; span=(1, 2), match='a'>
            <_sre.SRE_Match object; span=(3, 4), match='a'>
            <_sre.SRE_Match object; span=(5, 6), match='a'>
            <_sre.SRE_Match object; span=(7, 8), match='a'>
            <_sre.SRE_Match object; span=(10, 11), match='a'>
            <_sre.SRE_Match object; span=(11, 12), match='a'>
            <_sre.SRE_Match object; span=(15, 16), match='a'>
            <_sre.SRE_Match object; span=(16, 17), match='a'>
            <_sre.SRE_Match object; span=(17, 18), match='a'>
            <_sre.SRE_Match object; span=(18, 19), match='a'>
            <_sre.SRE_Match object; span=(19, 20), match='a'>

        - Range {start, end} => range of occurrances from start to end
            >>> for match in re.finditer('a{1,3}', 'bababababbaabbbaaaaab'):
            ...  print(match)
            ... 
            <_sre.SRE_Match object; span=(1, 2), match='a'>
            <_sre.SRE_Match object; span=(3, 4), match='a'>
            <_sre.SRE_Match object; span=(5, 6), match='a'>
            <_sre.SRE_Match object; span=(7, 8), match='a'>
            <_sre.SRE_Match object; span=(10, 12), match='aa'>
            <_sre.SRE_Match object; span=(15, 18), match='aaa'>
            <_sre.SRE_Match object; span=(18, 20), match='aa'>

        - Square brackets ([]) => Matches single tokens inside brackets
            >>> for match in re.finditer('a[0-9]', 'ba1ab4a6aaba5b3b1a3'):
            ...     print(match)
            ... 
            <_sre.SRE_Match object; span=(1, 3), match='a1'>
            <_sre.SRE_Match object; span=(6, 8), match='a6'>
            <_sre.SRE_Match object; span=(11, 13), match='a5'>
            <_sre.SRE_Match object; span=(17, 19), match='a3'>

            >>> for match in re.finditer('[a-zA-Z0-9]+', 'a12ba12ab42a6aaba52b3ba12a3'):
            ...     print(match)
            ... 
            <_sre.SRE_Match object; span=(0, 27), match='a12ba12ab42a6aaba52b3ba12a3'> *Note

            >>> for match in re.finditer('[^a-zA-Z0-9]+', ' @#$%^'):
            ...     print(match)
            ... 
            <_sre.SRE_Match object; span=(0, 6), match=' @#$%^'> **Note
        
        - Pipe (|) => matches values separated by | in "either...or" manner
            >>> for match in re.finditer('a|b', 'a12ba12ab42a6aaba52b3ba12a3'):
            ...     print(match)
            ... 
            <_sre.SRE_Match object; span=(0, 1), match='a'>
            <_sre.SRE_Match object; span=(3, 4), match='b'>
            <_sre.SRE_Match object; span=(4, 5), match='a'>
            <_sre.SRE_Match object; span=(7, 8), match='a'>
            <_sre.SRE_Match object; span=(8, 9), match='b'>
            <_sre.SRE_Match object; span=(11, 12), match='a'>
            <_sre.SRE_Match object; span=(13, 14), match='a'>
            <_sre.SRE_Match object; span=(14, 15), match='a'>
            <_sre.SRE_Match object; span=(15, 16), match='b'>
            <_sre.SRE_Match object; span=(16, 17), match='a'>
            <_sre.SRE_Match object; span=(19, 20), match='b'>
            <_sre.SRE_Match object; span=(21, 22), match='b'>
            <_sre.SRE_Match object; span=(22, 23), match='a'>
            <_sre.SRE_Match object; span=(25, 26), match='a'>

Assignments
1. WAP to accept multiple email ids from user and print whether all email ids are valid are not.

HW Assignments
1. WAP to read a file from user and print all the email ids in it. [Refine the email id pattern to accept period (.) in email id before @ and multiple domain separators.]
2. Read slide 5 of python_re presentation

* [a-zA-Z0-9]+ equates to \w+
** [^a-zA-Z0-9]+ => '^' acts as compliment (negation) and matches everything excluding the pattern => equates to \W+